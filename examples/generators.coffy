


############################################################################################################
# ERROR                     = require 'coffeenode-stacktrace'
njs_util                  = require 'util'
# njs_path                  = require 'path'
# njs_fs                    = require 'fs'
#...........................................................................................................
log                       = console.log
rpr                       = njs_util.inspect


### TAINT not a test suite just yet, just an example ###

#-----------------------------------------------------------------------------------------------------------
walk_fibonacci = ->*
  a = null
  b = null
  reset = ->
    a = 1
    b = 1
  reset()
  loop
    try
      c = a + b
      return if c > 100
      x = yield c
      # log '###', x
      a = b
      b = c
    catch error
      throw error unless error is 'reset'
      log '### RESET ###'
      reset()

walk_abc = ->*
  yield 'a'
  yield 'b'
  yield 'c'
  return

walk = ( generator ) ->
  { value
    done   }  = generator.next()
  this_value  = value
  next_value  = value
  current_idx = 0
  return Proxy.create
    # get:      ( proxy, name      ) ->
    # set:      ( proxy, name, val ) ->
    # has:      ( name             ) ->
    # delete:   ( name             ) ->
    # iterate:  () ->
    # keys:     () ->
    get: ( receiver, idx ) ->
      if idx is 'length'
        # log '***', current_idx
        return 0 if done
        return Infinity
      idx = parseInt idx, 10
      ### TAINT do proper value checking ###
      throw new Error "expected integer index, got #{rpr idx}" unless ( isFinite idx ) and idx > -1
      throw new Error "unable to go back to idx #{rpr idx}" unless idx + 1 >= current_idx
      log 'next_value', next_value, current_idx, idx
      # this_value  = next_value
      while current_idx < idx + 1
        this_value    = next_value
        { value
          done   }    = generator.next()
        next_value    = value
        current_idx  += 1
      return this_value if current_idx is idx


`
_ref = walk(walk_abc());
var reflen;
for (_i = 0; _i < ( reflen = _ref.length ); _i++) {
  n = _ref[_i];
  log( _i, reflen, n);
}
`



# Stack = ->
#   stack = []
#   allowed = ["push", "pop", "length"]
#   return Proxy.create
#     get: (receiver, name) ->
#       log '###', name
#       if allowed.indexOf(name) > -1
#         if typeof stack[name] is "function"
#           stack[name].bind stack
#         else
#           stack[name]
#       else
#         `undefined`

# # mystack = new Stack()
# # mystack.push "hi"
# # mystack.push "goodbye"
# # log mystack.length #1
# # log mystack[0] #undefined
# # log mystack.pop() #"goodbye"


f = ->*
  yield 1
  yield 2
  yield 3
g = f()
log g.next() is g.next()


